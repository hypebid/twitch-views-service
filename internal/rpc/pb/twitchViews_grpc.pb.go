// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitchViewsClient is the client API for TwitchViews service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitchViewsClient interface {
	// Used to check on the status of the service and all it's dependencies
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthStatus, error)
}

type twitchViewsClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitchViewsClient(cc grpc.ClientConnInterface) TwitchViewsClient {
	return &twitchViewsClient{cc}
}

func (c *twitchViewsClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, "/hypebid.TwitchViews/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitchViewsServer is the server API for TwitchViews service.
// All implementations must embed UnimplementedTwitchViewsServer
// for forward compatibility
type TwitchViewsServer interface {
	// Used to check on the status of the service and all it's dependencies
	HealthCheck(context.Context, *HealthRequest) (*HealthStatus, error)
	mustEmbedUnimplementedTwitchViewsServer()
}

// UnimplementedTwitchViewsServer must be embedded to have forward compatible implementations.
type UnimplementedTwitchViewsServer struct {
}

func (UnimplementedTwitchViewsServer) HealthCheck(context.Context, *HealthRequest) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTwitchViewsServer) mustEmbedUnimplementedTwitchViewsServer() {}

// UnsafeTwitchViewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitchViewsServer will
// result in compilation errors.
type UnsafeTwitchViewsServer interface {
	mustEmbedUnimplementedTwitchViewsServer()
}

func RegisterTwitchViewsServer(s grpc.ServiceRegistrar, srv TwitchViewsServer) {
	s.RegisterService(&TwitchViews_ServiceDesc, srv)
}

func _TwitchViews_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchViewsServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypebid.TwitchViews/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchViewsServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitchViews_ServiceDesc is the grpc.ServiceDesc for TwitchViews service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitchViews_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hypebid.TwitchViews",
	HandlerType: (*TwitchViewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TwitchViews_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitchViews.proto",
}
